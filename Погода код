from django.http import HttpResponse
from django.shortcuts import render
import requests

API_TOKEN = "a0298a279c2a05ed816637e8e11080d0"


def home(request):
    return HttpResponse("<h3>Добро пожаловать в мой мини-сервис!</h3>")


def info(request):
    return HttpResponse("<p>Тсс... Тут ничего интересного </p>")


def weather_page(request):
    city_name = request.GET.get("city")
    unit_system = request.GET.get("units", "metric")   # metric, imperial, standard
    chosen_day = request.GET.get("date")

    current_weather = None
    forecast = None
    message = None

    if city_name:
        # ---- текущая погода ----
        weather_url = (
            f"https://api.openweathermap.org/data/2.5/weather"
            f"?q={city_name}&appid={API_TOKEN}&units={unit_system}&lang=ru"
        )
        weather_resp = requests.get(weather_url)

        if weather_resp.ok:
            result = weather_resp.json()
            current_weather = {
                "city": result.get("name"),
                "temperature": result["main"]["temp"],
                "feels": result["main"]["feels_like"],
                "humidity": result["main"]["humidity"],
                "pressure": result["main"]["pressure"],
                "wind_speed": result["wind"]["speed"],
                "description": result["weather"][0]["description"],
            }
        else:
            message = "Такого города не нашлось. Попробуйте другой запрос."

        # ---- прогноз ----
        forecast_url = (
            f"https://api.openweathermap.org/data/2.5/forecast"
            f"?q={city_name}&appid={API_TOKEN}&units={unit_system}&lang=ru"
        )
        forecast_resp = requests.get(forecast_url)

        if forecast_resp.ok:
            forecast_json = forecast_resp.json()
            grouped_forecast = {}

            for entry in forecast_json["list"]:
                date_only = entry["dt_txt"].split(" ")[0]
                grouped_forecast.setdefault(date_only, []).append(entry)

            forecast = grouped_forecast

    return render(
        request,
        "weather.html",
        {
            "current": current_weather,
            "forecast": forecast,
            "date": chosen_day,
            "error": message,
            "units": unit_system,
        },
    )
from django.urls import path
from .views import home, info, weather_page

urlpatterns = [
    path("", home),
    path("info/", info),
    path("forecast/", weather_page),
]
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = "django-insecure-@(zmr-a@jqn5gyqn!4-w4*+#@wezd&@%$uo^yfz9&g$2@+a$@w"

DEBUG = True
ALLOWED_HOSTS: list[str] = []

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "main",  # наше приложение
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "arman_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],   # можно подключить собственные папки с шаблонами
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "arman_project.wsgi.application"

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

LANGUAGE_CODE = "ru-ru"
TIME_ZONE = "Asia/Almaty"

USE_I18N = True
USE_TZ = True

STATIC_URL = "static/"
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
